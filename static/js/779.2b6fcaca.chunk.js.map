{"version":3,"file":"static/js/779.2b6fcaca.chunk.js","mappings":"8LAEaA,E,OAAYC,GAAAA,IAAH,4F,SCCTC,EAAS,WACpB,OACE,SAACF,EAAD,WACE,SAAC,KAAD,CAAcG,MAAM,MAAMC,MAAM,aAGrC,C,yKCPYC,EAAOJ,EAAAA,GAAAA,GAAH,4CAIJK,EAAOL,EAAAA,GAAAA,GAAH,gDAIJM,EAAQN,EAAAA,GAAAA,GAAH,gDAILO,EAAOP,EAAAA,GAAAA,EAAH,4C,kBCRF,SAASQ,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAY,mCAAG,2FACnBJ,GAAa,GADM,mBAGEK,EAAAA,EAAAA,IAAgBJ,GAHlB,OAGXK,EAHW,OAIjBR,GAAW,OAAIQ,IAJE,gDAMjBC,QAAQC,IAAR,MANiB,yBAQjBR,GAAa,GARI,4EAAH,qDAWlBI,GAZC,CAaF,GAAE,CAACH,KAGF,gCACCF,IAAa,SAACX,EAAA,EAAD,IACXS,EAAQY,OAAS,GAChB,SAAClB,EAAD,UACCM,EAAQa,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,UAACrB,EAAD,YACE,UAACC,EAAD,sBAAgBkB,MAChB,UAACjB,EAAD,eAAQkB,EAAR,SAFSC,EAKd,OAGD,4DAIP,C,+LC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sBAAiC,CACtDG,OAAQ,CACNC,KAAM,KAHqB,uBACvBZ,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,qDASjBa,EAAgB,mCAAG,WAAMC,GAAN,yFACPN,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNG,MAAOA,EACPF,KAAM,KAJoB,uBACtBZ,EADsB,EACtBA,KADsB,kBAOvBA,GAPuB,2CAAH,sDAUhBe,EAAY,mCAAG,WAAMR,GAAN,yFACHC,EAAAA,EAAAA,IAAA,gBAAmBD,IADhB,uBAClBP,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZgB,EAAY,mCAAG,WAAMT,GAAN,yFACHC,EAAAA,EAAAA,IAAA,gBAAmBD,EAAnB,aADG,uBAClBP,EADkB,EAClBA,KADkB,kBAEnBA,EAAKiB,MAFc,2CAAH,sDAKZlB,EAAe,mCAAG,WAAMQ,GAAN,yFACNC,EAAAA,EAAAA,IAAA,gBAAmBD,EAAnB,aADM,uBACrBP,EADqB,EACrBA,KADqB,kBAEtBA,EAAKkB,SAFiB,2CAAH,qD","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  padding: 48px 16px;\n  max-width: 1240px;\n  text-align: center;\n`;","import { InfinitySpin } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderBox>\n      <InfinitySpin width=\"200\" color=\"#dc1818\" />\n    </LoaderBox>\n  );\n};","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  font-size: 20px;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 16px;\n`;\n\nexport const Title = styled.h5`\n  margin-bottom: 16px;\n`;\n\nexport const Text = styled.p`\n  font-size: 14px;\n`;","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieReviews } from 'services/api';\nimport { List, Item, Title, Text } from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews([...data]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n    {isLoading && <Loader />}\n      {reviews.length > 0 ? (\n        <List>\n        {reviews.map(({ author, content, id }) => {\n          return (\n            <Item key={id}>\n              <Title>Author: {author}</Title>\n              <Text>\"{content}\"</Text>\n            </Item>\n          );\n        })}\n      </List>\n      ) : (\n        <p>Sorry, there is no information</p>\n      )}\n    </>\n  );\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'f785eee6664a474771b5bfb7f34a07af',\n};\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day`, {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const getMovieBySearch = async query => {\n  const { data } = await axios.get(`/search/movie`, {\n    params: {\n      query: query,\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(`movie/${id}`);\n  return data;\n};\n\nexport const getMovieCast = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews`);\n  return data.results;\n};"],"names":["LoaderBox","styled","Loader","width","color","List","Item","Title","Text","Reviews","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","useEffect","fetchReviews","getMovieReviews","data","console","log","length","map","author","content","id","axios","api_key","getTrendingMovies","params","page","getMovieBySearch","query","getMovieById","getMovieCast","cast","results"],"sourceRoot":""}